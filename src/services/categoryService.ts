import { supabase } from '@/lib/supabase'
import type { Category, MonthCategory } from '@/types'

export const categoryService = {
  /**
   * Cr√©er une cat√©gorie par d√©faut
   */
  async createCategory(
    userId: string,
    name: string,
    budgetLimit: number,
    icon?: string,
    isDefault: boolean = true
  ): Promise<Category> {
    // R√©cup√©rer le nombre de cat√©gories pour d√©finir l'ordre
    const { count } = await supabase
      .from('categories')
      .select('*', { count: 'exact', head: true })
      .eq('userId', userId)

    const { data, error } = await supabase
      .from('categories')
      .insert({
        userId,
        name,
        budgetLimit,
        icon,
        isDefault,
        order: count || 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  },

  /**
   * R√©cup√©rer toutes les cat√©gories par d√©faut d'un utilisateur
   */
  async getDefaultCategories(userId: string): Promise<Category[]> {
    const { data, error } = await supabase
      .from('categories')
      .select('*')
      .eq('userId', userId)
      .eq('isDefault', true)
      .order('order')

    if (error) throw error
    return data || []
  },

  /**
   * Mettre √† jour une cat√©gorie
   */
  async updateCategory(
    categoryId: string,
    updates: Partial<Pick<Category, 'name' | 'budgetLimit' | 'icon'>>
  ): Promise<Category> {
    const { data, error } = await supabase
      .from('categories')
      .update({ ...updates, updatedAt: new Date().toISOString() })
      .eq('id', categoryId)
      .select()
      .single()

    if (error) throw error
    return data
  },

  /**
   * Supprimer une cat√©gorie
   */
  async deleteCategory(categoryId: string): Promise<void> {
    const { error } = await supabase.from('categories').delete().eq('id', categoryId)
    if (error) throw error
  },

  /**
   * Copier les cat√©gories par d√©faut vers un mois
   */
  async copyCategoriesToMonth(userId: string, monthId: string): Promise<MonthCategory[]> {
    // R√©cup√©rer les cat√©gories par d√©faut
    const defaultCategories = await this.getDefaultCategories(userId)

    // V√©rifier si les cat√©gories existent d√©j√† pour ce mois
    const { data: existing } = await supabase
      .from('month_categories')
      .select('*')
      .eq('monthId', monthId)

    if (existing && existing.length > 0) {
      return existing
    }

    // Cr√©er les month_categories
    const monthCategories = defaultCategories.map((cat) => ({
      userId,
      monthId,
      categoryId: cat.id,
      budgetLimit: cat.budgetLimit
    }))

    const { data, error } = await supabase
      .from('month_categories')
      .insert(monthCategories)
      .select()

    if (error) throw error
    return data || []
  },

  /**
   * R√©cup√©rer les cat√©gories d'un mois avec leurs budgets
   */
  async getMonthCategories(monthId: string): Promise<MonthCategory[]> {
    const { data, error } = await supabase
      .from('month_categories')
      .select('*, categories(*)')
      .eq('monthId', monthId)

    if (error) throw error
    return data || []
  },

  /**
   * Mettre √† jour le budget d'une cat√©gorie pour un mois sp√©cifique
   */
  async updateMonthCategoryBudget(
    monthCategoryId: string,
    budgetLimit: number
  ): Promise<MonthCategory> {
    const { data, error } = await supabase
      .from('month_categories')
      .update({ budgetLimit, updatedAt: new Date().toISOString() })
      .eq('id', monthCategoryId)
      .select()
      .single()

    if (error) throw error
    return data
  },

  /**
   * Initialiser les cat√©gories par d√©faut pour un nouvel utilisateur
   */
  async initializeDefaultCategories(userId: string): Promise<Category[]> {
    const defaultCategories = [
      { name: 'Alimentation', budgetLimit: 300, icon: 'üçî' },
      { name: 'Transport', budgetLimit: 150, icon: 'üöó' },
      { name: 'Loisirs', budgetLimit: 200, icon: 'üéÆ' },
      { name: 'Logement', budgetLimit: 800, icon: 'üè†' },
      { name: 'Sant√©', budgetLimit: 100, icon: 'üíä' }
    ]

    const categories: Category[] = []
    for (const cat of defaultCategories) {
      const category = await this.createCategory(
        userId,
        cat.name,
        cat.budgetLimit,
        cat.icon,
        true
      )
      categories.push(category)
    }

    return categories
  }
}
